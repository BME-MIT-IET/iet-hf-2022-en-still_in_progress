package main.java.com.InProgress.GUI;

import main.java.com.InProgress.Model.*;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.util.ArrayList;

public class GameWindow extends javax.swing.JFrame {
    public static String resource;

    /**
     * Creates new form MainWindow
     */
    public GameWindow() {
        initComponents();
        this.setLocationRelativeTo(null);
        labelPic.setText("");
    }

    /**
     * Loads and returns an Image file
     * @param name name of the Image file
     * @return Image file
     */
    private Image getImage (String name) {
        //TODO Change this to you address for the symbols directory
        String fileName = "/Users/liubovrukhlina/Documents/iet-hf-2022-en-still_in_progress/AsteroidMining/Asteroid Mining/resources/symbols/" + name.toLowerCase() + ".png";
        //ClassLoader classLoader = this.getClass().getClassLoader();
        ImageIcon icon = new ImageIcon(fileName);
        return icon.getImage();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {
        Asteroid asteroid = Game.getActiveSettler().getCurrentPosition();

        jPanel1 = new javax.swing.JPanel() {

            @Override // setting up images
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);

                if (!asteroid.getExploded())
                    g.drawImage(getImage("Asteroid"), 100, 150, this); //draw asteroid
                else {
                    g.drawImage(getImage("asteroid_exploded"), 100, 150, this);
                }

                switch (asteroid.getSettlersOnAsteroid().size())
                {
                    case 1:  g.drawImage(getImage("settler"), 300, 150, this); break;
                    case 2:  {
                        g.drawImage(getImage("settler"), 300, 150, this);
                        g.drawImage(getImage("settler"), 400, 150, this);
                    } break;
                    case 3: {
                        g.drawImage(getImage("settler"), 400, 150, this);
                        g.drawImage(getImage("settler"), 200, 150, this);
                        g.drawImage(getImage("settler"), 300, 150, this);

                    }break;
                }

                if (Game.getSun().getSunX() == asteroid.getX()) {
                    g.drawImage(getImage("sun"), 150, 50, this);
                }

                //System.out.println(asteroid.getRobotsOnAsteroid().size());
                if(asteroid.getRobotsOnAsteroid().size() != 0) {
                    g.drawImage(getImage("robot"), 150, 50, this);
                }

                if (asteroid.getHasGate() && asteroid.getGate().getActive()) {
                    g.drawImage(getImage("gate_active"), 500, 50, this);
                }

                if (asteroid.getHasGate() && !asteroid.getGate().getActive()) {
                    g.drawImage(getImage("gate_inactive"), 500, 50, this);
                }


                if (asteroid.getDepth() == 0) {
                    if (asteroid.getHollow()) {
                        g.drawImage(getImage("res_hollow"), 300, 360, this);
                    }
                    else {
                        switch (asteroid.getResourceOfAsteroid().get(0).getResourceType()) {
                            case "Iron":  {
                                g.drawImage(getImage("res_iron"), 300, 360, this);
                            }break;
                            case "WaterIce": {
                                g.drawImage(getImage("res_waterIce"), 300, 360, this);
                            }break;
                            case "Uranium": {
                                g.drawImage(getImage("res_uranium"), 300, 360, this);
                            }break;
                            case "Carbon":
                            {
                                g.drawImage(getImage("res_carbon"), 300, 360, this);
                            }break;
                        }
                    }
                }

                int counter = 100;
                for (ResourceBase res : asteroid.getStoredResourceOfAsteroid()
                ) {
                    switch (res.getResourceType()) {
                        case "Iron":  {
                            g.drawImage(getImage("stored_iron"), counter, 500, this);
                            counter += 50;
                        }break;
                        case "WaterIce": {
                            g.drawImage(getImage("stored_waterIce"), counter, 360, this);
                            counter += 50;
                        }break;
                        case "Uranium": {
                            g.drawImage(getImage("stored_uranium"), counter, 360, this);
                            counter += 50;
                        }break;
                        case "Carbon":
                        {
                            g.drawImage(getImage("stored_carbon"), counter, 360, this);
                            counter += 50;
                        }break;
                    }
                }
            }
        };

        // Instantiate components
        currentPlayer = new javax.swing.JLabel();
        travelButton = new javax.swing.JButton();
        currentAsteroidLabel = new javax.swing.JLabel();
        hollowLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        gatesList = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        inventoryList = new javax.swing.JList<>();
        statusLabel = new javax.swing.JLabel();
        activeSettlerLabel = new javax.swing.JLabel();
        deathLabel = new javax.swing.JLabel();
        hiddenLabel = new javax.swing.JLabel();
        asteroidBeltLabel = new javax.swing.JLabel();
        miningStatusLabel = new javax.swing.JLabel();
        gateLabel = new javax.swing.JLabel();
        perihelionLabel = new javax.swing.JLabel();
        destinationLabel = new javax.swing.JLabel();
        resourceLabel = new javax.swing.JLabel();
        numSettlerLabel = new javax.swing.JLabel();
        numRobotLabel = new javax.swing.JLabel();
        numGatesLabel = new javax.swing.JLabel();
        numAsteroidsLabel = new javax.swing.JLabel();
        sunstormLabel = new javax.swing.JLabel();
        resourcesListLabel = new javax.swing.JLabel();
        gatesLabel = new javax.swing.JLabel();
        fastTravelButton = new javax.swing.JButton();
        drillButton = new javax.swing.JButton();
        mineButton = new javax.swing.JButton();
        leaveButton = new javax.swing.JButton();
        pickupButton = new javax.swing.JButton();
        buildButton = new javax.swing.JButton();
        finishButton = new javax.swing.JButton();
        labelPic = new javax.swing.JLabel();
        settlersListLabel = new javax.swing.JComboBox<>();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        start = new javax.swing.JMenuItem();
        exit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenuItem();

        // window settings
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(153, 153, 153));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(true);

        jPanel1.setBackground(new java.awt.Color(102, 102, 102));
        jPanel1.setForeground(new java.awt.Color(153, 153, 153));

        // set up labels
        currentPlayer.setFont(new java.awt.Font("Consolas", 1, 20)); // NOI18N
        currentPlayer.setForeground(new java.awt.Color(51, 204, 0));
        currentPlayer.setText("Player:" + Game.getCurrentPlayer().getPlayerID());

        currentAsteroidLabel.setFont(new java.awt.Font("Consolas", 1, 28)); // NOI18N
        currentAsteroidLabel.setForeground(new java.awt.Color(51, 204, 0));
        currentAsteroidLabel.setText("Asteroid: " + asteroid.toString());

        hollowLabel.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N
        hollowLabel.setForeground(new java.awt.Color(51, 204, 0));
        if (asteroid.getHollow() && asteroid.getDepth() == 0)
            hollowLabel.setText("Hollow: True");
        else
            hollowLabel.setText("Hollow: False");

        statusLabel.setFont(new java.awt.Font("Consolas", 1, 20)); // NOI18N
        statusLabel.setForeground(new java.awt.Color(51, 204, 0));
        statusLabel.setText("Status");

        activeSettlerLabel.setFont(new java.awt.Font("Consolas", 1, 20)); // NOI18N
        activeSettlerLabel.setForeground(new java.awt.Color(51, 204, 0));
        activeSettlerLabel.setText(Game.getActiveSettler().getName());

        deathLabel.setFont(new java.awt.Font("Consolas", 1, 20)); // NOI18N
        deathLabel.setForeground(new java.awt.Color(51, 204, 0));
        if(Game.getActiveSettler().getAlive())
            deathLabel.setText("Alive");
        else
            deathLabel.setText("Dead");

        hiddenLabel.setFont(new java.awt.Font("Consolas", 1, 20)); // NOI18N
        hiddenLabel.setForeground(new java.awt.Color(51, 204, 0));
        if(Game.getActiveSettler().getHidden())
            hiddenLabel.setText("Hidden");
        else
            hiddenLabel.setText("Unhidden");

        asteroidBeltLabel.setFont(new java.awt.Font("Consolas", 1, 28)); // NOI18N
        asteroidBeltLabel.setForeground(new java.awt.Color(51, 204, 0));
        asteroidBeltLabel.setText("Asteroid Belt ");

        miningStatusLabel.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N
        miningStatusLabel.setForeground(new java.awt.Color(51, 204, 0));
        if((asteroid.getDepth() == 0) && !asteroid.getHollow())
            miningStatusLabel.setText("Mineable: Yes");
        else
            miningStatusLabel.setText("Mineable: No " /*+ "Depth: " + asteroid.getDepth()*/);

        gateLabel.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N
        gateLabel.setForeground(new java.awt.Color(51, 204, 0));
        if(asteroid.getHasGate())
            gateLabel.setText("Gate: True");
        else
            gateLabel.setText("Gate: False ");

        perihelionLabel.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N
        perihelionLabel.setForeground(new java.awt.Color(51, 204, 0));
        if(asteroid.getX() == Game.getSun().getSunX())
        {
            asteroid.setAtPerihelion(true);
        }
        if(asteroid.getAtPerihelion())
            perihelionLabel.setText("Perihelion: True");
        else
            perihelionLabel.setText("Perihelion: False");

        destinationLabel.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N
        destinationLabel.setForeground(new java.awt.Color(51, 204, 0));
        if(asteroid.getHasGate() && asteroid.getGate().getActive())
            destinationLabel.setText("Destination:" + Game.getActiveSettler().getCurrentPosition().getGate().getPair().getCurrentPosition().toString());

        resourceLabel.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N
        resourceLabel.setForeground(new java.awt.Color(51, 204, 0));
        try
        {
            ResourceBase resource = asteroid.getStoredResourceOfAsteroid().get(0);
            String res = resource.getResourceType();
            resourceLabel.setText(res);
        }
        catch (IndexOutOfBoundsException ex)
        {
            resourceLabel.setText("None");

            numSettlerLabel.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N
            numSettlerLabel.setForeground(new java.awt.Color(51, 204, 0));
            numSettlerLabel.setText("Settler: " + Game.getNumberOfSettlers());

            numRobotLabel.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N
            numRobotLabel.setForeground(new java.awt.Color(51, 204, 0));
            numRobotLabel.setText("Robot: " + Game.getRobots().size());

            numGatesLabel.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N
            numGatesLabel.setForeground(new java.awt.Color(51, 204, 0));
            numGatesLabel.setText("Gates: " + Game.getNumberOfGates());

            numAsteroidsLabel.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N
            numAsteroidsLabel.setForeground(new java.awt.Color(51, 204, 0));
            numAsteroidsLabel.setText("Asteroids: " + Game.getNumberOfAsteroids());

            sunstormLabel.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N
            sunstormLabel.setForeground(new java.awt.Color(51, 204, 0));
            sunstormLabel.setText("SunStorm: " + Game.getSun().getCountdownOfSunStorm());

            resourcesListLabel.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N
            resourcesListLabel.setForeground(new java.awt.Color(51, 204, 0));
            resourcesListLabel.setText("Resources");

            gatesLabel.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N
            gatesLabel.setForeground(new java.awt.Color(51, 204, 0));
            gatesLabel.setText("Gates");
        }

        // set up buttons
        travelButton.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N
        travelButton.setText("Travel");
        travelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TravelButtonActionPerformed(evt);
            }
        });

        fastTravelButton.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N
        fastTravelButton.setText("FastTravel");
        fastTravelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FastTravelButtonActionPerformed(evt);
            }
        });

        drillButton.setFont(new java.awt.Font("Consolas", 0, 18)); //NOI18N
        drillButton.setText("Drill");
        drillButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DrillButtonActionPerformed(evt);
            }
        });

        mineButton.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N
        mineButton.setText("Mine");
        mineButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MineButtonActionPerformed(evt);
            }
        });

        leaveButton.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N
        leaveButton.setText("Leave");
        leaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LeaveButtonActionPerformed(evt);
            }
        });

        pickupButton.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N
        pickupButton.setText("PickUp");
        pickupButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PickupButtonActionPerformed(evt);
            }
        });

        buildButton.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N
        buildButton.setText("Build/Deploy gate");
        buildButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BuildButtonActionPerformed(evt);
            }
        });

        finishButton.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N
        finishButton.setText("Finish");
        finishButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FinishButtonActionPerformed(evt);
            }
        });

        // set up combo boxes
        Inventory inv = Game.getActiveSettler().getItsInventory();

        if(inv.getStoredGates().size() != 0) {

            gatesList.setModel(new javax.swing.AbstractListModel<String>() {


                public int getSize() {
                    return 2;
                }

                public String getElementAt(int i) {
                    return "Gate"+i+1;
                }
            });

        }
        else
        {
            gatesList.setModel(new javax.swing.AbstractListModel<String>() {


                public int getSize() {
                    return 2;
                }

                public String getElementAt(int i) {
                    return " ";
                }
            });

        }
        jScrollPane1.setViewportView(gatesList);

        inventoryList.setModel(new javax.swing.AbstractListModel<String>() {
            public int getSize() { return inv.getStoredResources().size(); }
            public String getElementAt(int i) { return inv.getStoredResources().get(i).getResourceType(); }
        });
        jScrollPane2.setViewportView(inventoryList);


        labelPic.setText("Hello!");
        labelPic.setMaximumSize(new java.awt.Dimension(46, 46));
        labelPic.setMinimumSize(new java.awt.Dimension(46, 46));
        labelPic.setName("labelPic"); // NOI18N

        ArrayList<String>  settlers = new ArrayList<String>();

        for(Settler i :Game.getCurrentPlayer().getSettlers() )
        {
            settlers.add(i.getName());
        }
        settlersListLabel.setModel(new javax.swing.DefaultComboBoxModel(settlers.toArray()));
        settlersListLabel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectSettler(evt);
            }
        });

        // Set up Menu bar
        jMenuBar1.setForeground(new java.awt.Color(153, 153, 153));

        jMenu1.setText("Menu");
        jMenu1.add(exit);
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        start.setText("Start New Game");
        jMenu1.add(start);
        start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newGameActionPerformed(evt);
            }
        });


        exit.setText("Exit");
        jMenu1.add(exit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Help");
        jMenuBar1.add(jMenu2);
        jMenu2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpActionPerformed(evt);
            }
        });

        setJMenuBar(jMenuBar1);

        //<editor-fold desc="Placing components">
        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                                .addComponent(travelButton)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(fastTravelButton))
                                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                                .addComponent(currentPlayer, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                .addComponent(activeSettlerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                                                .addGap(18, 18, 18)
                                                                .addComponent(settlersListLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addComponent(statusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(18, 18, 18)
                                                                .addComponent(deathLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(hiddenLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(68, 68, 68))
                                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                                .addComponent(drillButton)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(mineButton)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(leaveButton)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(pickupButton)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(buildButton)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(finishButton))))
                                        .addComponent(labelPic, javax.swing.GroupLayout.PREFERRED_SIZE, 776, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(106, 106, 106)
                                                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE))
                                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                                .addComponent(gateLabel)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addComponent(destinationLabel)))
                                                .addGap(141, 141, 141))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(perihelionLabel, javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(numSettlerLabel, javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(numRobotLabel, javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(numGatesLabel, javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(numAsteroidsLabel, javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(sunstormLabel, javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(currentAsteroidLabel, javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(miningStatusLabel, javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(asteroidBeltLabel, javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(resourceLabel, javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(hollowLabel, javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                                                .addComponent(resourcesListLabel)
                                                                .addGap(105, 105, 105)
                                                                .addComponent(gatesLabel)))
                                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(currentPlayer, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(currentAsteroidLabel)
                                        .addComponent(statusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(activeSettlerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(deathLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(hiddenLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(settlersListLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(50, 50, 50)
                                                .addComponent(labelPic, javax.swing.GroupLayout.PREFERRED_SIZE, 599, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(50, 50, 50)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(travelButton)
                                                        .addComponent(fastTravelButton)
                                                        .addComponent(drillButton)
                                                        .addComponent(mineButton)
                                                        .addComponent(leaveButton)
                                                        .addComponent(pickupButton)
                                                        .addComponent(buildButton)
                                                        .addComponent(finishButton)))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(18, 18, 18)
                                                .addComponent(miningStatusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(hollowLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(gateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(destinationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(11, 11, 11)
                                                .addComponent(perihelionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(27, 27, 27)
                                                .addComponent(resourceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(asteroidBeltLabel)
                                                .addGap(20, 20, 20)
                                                .addComponent(numSettlerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(14, 14, 14)
                                                .addComponent(numRobotLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(14, 14, 14)
                                                .addComponent(numGatesLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(20, 20, 20)
                                                .addComponent(numAsteroidsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(sunstormLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(40, 40, 40)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(resourcesListLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(gatesLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addContainerGap(40, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(35, 35, 35))
        );
        //</editor-fold">

        pack();
    }

    // </editor-fold>

    //<editor-fold desc="ActionListeners">
    /**
     * Exits the game applicatin.
     *
     * @param evt click event
     */
    private void exitActionPerformed(ActionEvent evt) {
        System.exit(0);
    }

    /**
     * Ends the  current game and returns to the start window.
     *
     * @param evt click event
     */
    private void newGameActionPerformed(ActionEvent evt) {
        ArrayList<String> defaultList = new ArrayList<>();

        Game.controllerExternal(13, defaultList);

        setVisible(false);
        dispose();
    }

    /**
     * Opens the dialogue window that allows to choose the travel destination.
     *
     * @param evt click event
     */
    private void TravelButtonActionPerformed(java.awt.event.ActionEvent evt) {
        TravelWindow travelWindow = new TravelWindow(this);
        travelWindow.initialize(this);
    }

    /**
     * Calls the Game.controllerExternal() method to travel through the a TransportGate.
     * Updates the game window.
     *
     * @param evt click event
     */
    private void FastTravelButtonActionPerformed(java.awt.event.ActionEvent evt) {
        ArrayList<String> defaultList = new ArrayList<>();

        Game.controllerExternal(2, defaultList);
        setVisible(false);
        dispose();

        GameWindow gameWindow = new GameWindow();
        gameWindow.initialize();
    }

    /**
     * Calls the Game.controllerExternal() to drill an Asteroid when "Drill" button is clicked.
     * Updates the game window.
     *
     * @param evt click event
     */
    private void DrillButtonActionPerformed(java.awt.event.ActionEvent evt) {
        ArrayList<String> defaultList = new ArrayList<>();

        Game.controllerExternal(3, defaultList);
        setVisible(false);
        dispose();

        GameWindow gameWindow = new GameWindow();
        gameWindow.initialize();
    }

    /**
     * Calls the Game.controllerExternal() to mine a Resource when "mine" button is clicked.
     * Updates the game window.
     *
     * @param evt click event
     */
    private void MineButtonActionPerformed(java.awt.event.ActionEvent evt) {
        ArrayList<String> defaultList = new ArrayList<>();

        Game.controllerExternal(4, defaultList);
        setVisible(false);
        dispose();

        GameWindow gameWindow = new GameWindow();
        gameWindow.initialize();
    }

    /**
     * Opens the dialogue window that allows to choose which Resource to leave on the Asteroid.
     *
     * @param evt click event
     */
    private void LeaveButtonActionPerformed(java.awt.event.ActionEvent evt) {
        LeaveResourcesWindow leave = new LeaveResourcesWindow(this);
        leave.initialize(this);
    }

    /**
     * Calls the Game.controllerExternal() to pick up a stored Resource on top of Asteroid.
     * Updates the game window.
     *
     * @param evt click event
     */
    private void PickupButtonActionPerformed(java.awt.event.ActionEvent evt) {
        ArrayList<String> defaultList = new ArrayList<>();

        Game.controllerExternal(6, defaultList);
        setVisible(false);
        dispose();

        GameWindow gameWindow = new GameWindow();
        gameWindow.initialize();
    }

    /**
     * Opens the dialogue window which allows the user to decide what to build and to deploy gates.
     *
     * @param evt click event
     */
    private void BuildButtonActionPerformed(java.awt.event.ActionEvent evt) {
        BuildWindow build = new BuildWindow(this);
        build.initialize(this);//2
    }

    /**
     * Calls the Game.controllerExternal() to finish the current turn.
     * Updates the game window.
     *
     * @param evt click event
     */
    private void FinishButtonActionPerformed(java.awt.event.ActionEvent evt) {
        ArrayList<String> defaultList = new ArrayList<>();

        Game.controllerExternal(11, defaultList);
        setVisible(false);
        dispose();

        GameWindow gameWindow = new GameWindow();
        gameWindow.initialize();
    }

    /**
     * Calls the Game.controllerExternal() to switch the active Settler.
     * Updates the game window.
     *
     * @param evt click event
     */
    private void selectSettler(ActionEvent evt) {
        ArrayList<String> input = new ArrayList<>();
        input.add(0, settlersListLabel.getSelectedItem().toString());

        Game.controllerExternal(12, input);

        setVisible(false);
        dispose();

        GameWindow gameWindow = new GameWindow();
        gameWindow.initialize();
    }

    /**
     * Creates infobox window to display a help message for the user when "Help" is clicked in the menubar.
     *
     * @param evt click event
     */
    private void helpActionPerformed(ActionEvent evt) {
        GameWindow.infobox("Nobody can hear you scream in space","You are on your own!");
    }
    //</editor-fold">

    /**
     * Initializes BuildWindow window and makes it visible.
     */
    public void initialize() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GameWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GameWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GameWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GameWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GameWindow().setVisible(true);
            }
        });
    }

    /**
     * Creates an infobox to display information to the user.
     *
     * @param message Text of the message to the user
     * @param title Title of the window
     */
    public static void infobox(String message,String title) {
        JOptionPane.showMessageDialog(null,message,title, JOptionPane.INFORMATION_MESSAGE);
    }

    //<editor-fold desc="Variables">
    // Variables declaration - do not modify
    private javax.swing.JLabel activeSettlerLabel;
    private javax.swing.JLabel asteroidBeltLabel;
    private javax.swing.JButton buildButton;
    private javax.swing.JLabel currentAsteroidLabel;
    private javax.swing.JLabel currentPlayer;
    private javax.swing.JLabel deathLabel;
    private javax.swing.JLabel destinationLabel;
    private javax.swing.JButton drillButton;
    private javax.swing.JMenuItem exit;
    private javax.swing.JButton fastTravelButton;
    private javax.swing.JButton finishButton;
    private javax.swing.JLabel gateLabel;
    private javax.swing.JLabel gatesLabel;
    private javax.swing.JLabel hiddenLabel;
    private javax.swing.JLabel hollowLabel;
    private javax.swing.JButton leaveButton;
    private javax.swing.JButton mineButton;
    private javax.swing.JLabel miningStatusLabel;
    private javax.swing.JList<String> gatesList;
    private javax.swing.JList<String> inventoryList;
    private javax.swing.JLabel numAsteroidsLabel;
    private javax.swing.JLabel numGatesLabel;
    private javax.swing.JLabel numRobotLabel;
    private javax.swing.JLabel numSettlerLabel;
    private javax.swing.JLabel perihelionLabel;
    private javax.swing.JButton pickupButton;
    private javax.swing.JLabel resourceLabel;
    private javax.swing.JLabel resourcesListLabel;
    private javax.swing.JComboBox<String> settlersListLabel;
    private javax.swing.JMenuItem start;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JLabel sunstormLabel;
    private javax.swing.JButton travelButton;
    private javax.swing.JList<String> jList1;
    private javax.swing.JList<String> jList2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuItem jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel labelPic;
    //</editor-fold>
}
